// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Put you code here:

    //nxとzxによる処理,マルチプレクサでif文処理する
    Mux16(a=x, b=false, sel=zx, out=xout0);
    Not16(in=xout0, out=x16out);
    Mux16(a=xout0, b=x16out, sel=nx, out=xout1);

    //yも同様
    Mux16(a=y, b=false, sel=zy, out=yout0);
    Not16(in=yout0, out=y16out);
    Mux16(a=yout0, b=y16out, sel=ny, out=yout1);

    And16(a=xout1, b=yout1, out=calc0);
    Add16(a=xout1, b=yout1, out=calc1);
    Mux16(a=calc0, b=calc1, sel=f, out=out0);

    Not16(in=out0, out=outNot);
    //outを分岐させる時はこんな感じで書く.分かりにくすぎる！！
    Mux16(a=out0, b=outNot, sel=no, out[0..7]=outMux0,out[8..15]=outMux1,out[15]=ng,out=out);

    //上下8bitごとにOr演算して最後にNorを計算
    //Or8way(in=out[0..7],b=...)みたいな使い方はできないので注意.エミュレータでエラーが出る.
    //配列を表す場合は[少ない..多い]で書く
    Or8Way(in=outMux0, out=outOr0);
    Or8Way(in=outMux1, out=outOr1);
    Or(a=outOr0, b=outOr1, out=zrbar);
    Not(in=zrbar, out=zr); 
}